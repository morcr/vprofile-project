pipeline {
  agent any
  tools {
    maven "MAVEN3"
    jdk "OracleJDK8"
  }
  
  environment {
    SNAP_REPO = "vprofile-snapshot"
    NEXUS_USER = "admin"
    NEXUS_PASS = "admin123"
    RELEASE_REPO = "vprofile-release"
    CENTRAL_REPO = "vpro-maven-central"
    NEXUSIP = "172.31.85.241"
    NEXUSPORT = "8081"
    NEXUS_GRP_REPO = "vprofile-maven-group"
    NEXUS_LOGIN = "nexuslogin"
    SONARSERVER = "sonarserver"
    SONARSCANNER = "sonarscanner"
    registryCredentials = 'ecr:us-east-1:awscreds'
    appRegistry = '637423638426.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg'
    vprofileRegistry = "https://637423638426.dkr.ecr.us-east-1.amazonaws.com"
  }
  stages {
    stage("Build") {
      steps {
        sh "mvn -s settings.xml -DskipTests install"
      }
      post {
        success {
          echo "Now archiving."
          archiveArtifacts artifacts: '**/*.war'
        }
      }
    }

  
    
    stage('Checkstyle Analysis') {
      steps {
        sh 'mvn -s settings.xml checkstyle:checkstyle'
      }
    }

    stage('Sonar Analysis') {
      environment{
        scannerHome = tool "${SONARSCANNER}"
      }
      steps {
        withSonarQubeEnv("${SONARSERVER}") {
          sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
          -Dsonar.projectName=vprofile \
          -Dsonar.projectVersion=1.0 \
          -Dsonar.sources=src/ \
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
          -Dsonar.junit.reportsPath=target/surefire-reports/ \
          -Dsonar.jacoco.reportsPath=target/jacoco.exec \
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
        }
      }
    }
    stage("quality gate") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    stage("upload artifact"){
      steps {
        nexusArtifactUploader(
          nexusVersion: 'nexus3',
          protocol: 'http',
          nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
          groupId: 'QA',
          version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
          repository: "${RELEASE_REPO}",
          credentialsId: "${NEXUS_LOGIN}",
          artifacts: [
            [artifactId: 'vproapp',
            classifier: '',
            file: 'target/vprofile-v2.war',
            type: 'war']
          ]
        )
      }
    }
    stage("build app image") {
      steps {
        script {
          dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
        }
      }
    }
    stage('upload App image') {
      steps {
        script {
          docker.withRegistry( vprofileRegistry, registryCredentials ){
            dockerImage.push("$BUILD_NUMBER")
            dockerImage.push('latest')
          }
        }
      }
    }
  }
}
